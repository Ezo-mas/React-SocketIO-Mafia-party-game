{"ast":null,"code":"import { io } from 'socket.io-client';\n\n// Determine server URL based on current environment\nconst getServerUrl = () => {\n  // Check if we're in production (deployment) by checking the domain\n  if (window.location.hostname !== 'localhost') {\n    return window.location.origin; // Use the same origin for WebSocket in production\n  }\n  return process.env.REACT_APP_SERVER_URL || 'http://localhost:8080';\n};\n\n// Create a singleton socket instance with connection options\nconst socket = io(getServerUrl(), {\n  // <-- Use the function here!\n  transports: ['websocket'],\n  reconnection: true,\n  reconnectionAttempts: 5,\n  reconnectionDelay: 1000,\n  autoConnect: true,\n  forceNew: false\n});\n\n// Debug connection events\nsocket.on('connect', () => {\n  console.log('Socket connected with ID:', socket.id);\n  console.log('Connected to server:', getServerUrl());\n});\nsocket.on('disconnect', () => {\n  console.log('Socket disconnected');\n});\nsocket.on('connect_error', error => {\n  console.log('Socket connection error:', error);\n  console.log('Failed connecting to:', getServerUrl());\n});\nexport default socket;","map":{"version":3,"names":["io","getServerUrl","window","location","hostname","origin","process","env","REACT_APP_SERVER_URL","socket","transports","reconnection","reconnectionAttempts","reconnectionDelay","autoConnect","forceNew","on","console","log","id","error"],"sources":["C:/Users/kipra/Desktop/KTU/React-SocketIO-Mafia-party-game/client/src/services/socket.jsx"],"sourcesContent":["import { io } from 'socket.io-client';\r\n\r\n// Determine server URL based on current environment\r\nconst getServerUrl = () => {\r\n  // Check if we're in production (deployment) by checking the domain\r\n  if (window.location.hostname !== 'localhost') {\r\n    return window.location.origin; // Use the same origin for WebSocket in production\r\n  }\r\n  return process.env.REACT_APP_SERVER_URL || 'http://localhost:8080';\r\n};\r\n\r\n// Create a singleton socket instance with connection options\r\nconst socket = io(getServerUrl(), { // <-- Use the function here!\r\n  transports: ['websocket'],\r\n  reconnection: true,\r\n  reconnectionAttempts: 5,\r\n  reconnectionDelay: 1000,\r\n  autoConnect: true,\r\n  forceNew: false\r\n});\r\n\r\n// Debug connection events\r\nsocket.on('connect', () => {\r\n  console.log('Socket connected with ID:', socket.id);\r\n  console.log('Connected to server:', getServerUrl());\r\n});\r\n\r\nsocket.on('disconnect', () => {\r\n  console.log('Socket disconnected');\r\n});\r\n\r\nsocket.on('connect_error', (error) => {\r\n  console.log('Socket connection error:', error);\r\n  console.log('Failed connecting to:', getServerUrl());\r\n});\r\n\r\nexport default socket;"],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;;AAErC;AACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB;EACA,IAAIC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW,EAAE;IAC5C,OAAOF,MAAM,CAACC,QAAQ,CAACE,MAAM,CAAC,CAAC;EACjC;EACA,OAAOC,OAAO,CAACC,GAAG,CAACC,oBAAoB,IAAI,uBAAuB;AACpE,CAAC;;AAED;AACA,MAAMC,MAAM,GAAGT,EAAE,CAACC,YAAY,CAAC,CAAC,EAAE;EAAE;EAClCS,UAAU,EAAE,CAAC,WAAW,CAAC;EACzBC,YAAY,EAAE,IAAI;EAClBC,oBAAoB,EAAE,CAAC;EACvBC,iBAAiB,EAAE,IAAI;EACvBC,WAAW,EAAE,IAAI;EACjBC,QAAQ,EAAE;AACZ,CAAC,CAAC;;AAEF;AACAN,MAAM,CAACO,EAAE,CAAC,SAAS,EAAE,MAAM;EACzBC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAET,MAAM,CAACU,EAAE,CAAC;EACnDF,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEjB,YAAY,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC;AAEFQ,MAAM,CAACO,EAAE,CAAC,YAAY,EAAE,MAAM;EAC5BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;AACpC,CAAC,CAAC;AAEFT,MAAM,CAACO,EAAE,CAAC,eAAe,EAAGI,KAAK,IAAK;EACpCH,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEE,KAAK,CAAC;EAC9CH,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEjB,YAAY,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC;AAEF,eAAeQ,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}